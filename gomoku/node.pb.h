// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto;
namespace gomoku {
class board_node;
class board_nodeDefaultTypeInternal;
extern board_nodeDefaultTypeInternal _board_node_default_instance_;
class board_node_NextDataEntry_DoNotUse;
class board_node_NextDataEntry_DoNotUseDefaultTypeInternal;
extern board_node_NextDataEntry_DoNotUseDefaultTypeInternal _board_node_NextDataEntry_DoNotUse_default_instance_;
class board_root;
class board_rootDefaultTypeInternal;
extern board_rootDefaultTypeInternal _board_root_default_instance_;
class board_root_FirstDataEntry_DoNotUse;
class board_root_FirstDataEntry_DoNotUseDefaultTypeInternal;
extern board_root_FirstDataEntry_DoNotUseDefaultTypeInternal _board_root_FirstDataEntry_DoNotUse_default_instance_;
class pb_pn_node;
class pb_pn_nodeDefaultTypeInternal;
extern pb_pn_nodeDefaultTypeInternal _pb_pn_node_default_instance_;
}  // namespace gomoku
PROTOBUF_NAMESPACE_OPEN
template<> ::gomoku::board_node* Arena::CreateMaybeMessage<::gomoku::board_node>(Arena*);
template<> ::gomoku::board_node_NextDataEntry_DoNotUse* Arena::CreateMaybeMessage<::gomoku::board_node_NextDataEntry_DoNotUse>(Arena*);
template<> ::gomoku::board_root* Arena::CreateMaybeMessage<::gomoku::board_root>(Arena*);
template<> ::gomoku::board_root_FirstDataEntry_DoNotUse* Arena::CreateMaybeMessage<::gomoku::board_root_FirstDataEntry_DoNotUse>(Arena*);
template<> ::gomoku::pb_pn_node* Arena::CreateMaybeMessage<::gomoku::pb_pn_node>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gomoku {

// ===================================================================

class pb_pn_node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gomoku.pb_pn_node) */ {
 public:
  inline pb_pn_node() : pb_pn_node(nullptr) {}
  virtual ~pb_pn_node();

  pb_pn_node(const pb_pn_node& from);
  pb_pn_node(pb_pn_node&& from) noexcept
    : pb_pn_node() {
    *this = ::std::move(from);
  }

  inline pb_pn_node& operator=(const pb_pn_node& from) {
    CopyFrom(from);
    return *this;
  }
  inline pb_pn_node& operator=(pb_pn_node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pb_pn_node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pb_pn_node* internal_default_instance() {
    return reinterpret_cast<const pb_pn_node*>(
               &_pb_pn_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(pb_pn_node& a, pb_pn_node& b) {
    a.Swap(&b);
  }
  inline void Swap(pb_pn_node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pb_pn_node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pb_pn_node* New() const final {
    return CreateMaybeMessage<pb_pn_node>(nullptr);
  }

  pb_pn_node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pb_pn_node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pb_pn_node& from);
  void MergeFrom(const pb_pn_node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pb_pn_node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gomoku.pb_pn_node";
  }
  protected:
  explicit pb_pn_node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildrenFieldNumber = 9,
    kColFieldNumber = 1,
    kRowFieldNumber = 2,
    kProofFieldNumber = 5,
    kDisproofFieldNumber = 6,
    kThreatFieldNumber = 7,
    kSizeFieldNumber = 8,
  };
  // repeated .gomoku.pb_pn_node children = 9;
  int children_size() const;
  private:
  int _internal_children_size() const;
  public:
  void clear_children();
  ::gomoku::pb_pn_node* mutable_children(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gomoku::pb_pn_node >*
      mutable_children();
  private:
  const ::gomoku::pb_pn_node& _internal_children(int index) const;
  ::gomoku::pb_pn_node* _internal_add_children();
  public:
  const ::gomoku::pb_pn_node& children(int index) const;
  ::gomoku::pb_pn_node* add_children();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gomoku::pb_pn_node >&
      children() const;

  // int32 col = 1;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 row = 2;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 proof = 5;
  void clear_proof();
  ::PROTOBUF_NAMESPACE_ID::int32 proof() const;
  void set_proof(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proof() const;
  void _internal_set_proof(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 disproof = 6;
  void clear_disproof();
  ::PROTOBUF_NAMESPACE_ID::int32 disproof() const;
  void set_disproof(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_disproof() const;
  void _internal_set_disproof(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 threat = 7;
  void clear_threat();
  ::PROTOBUF_NAMESPACE_ID::int32 threat() const;
  void set_threat(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_threat() const;
  void _internal_set_threat(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 size = 8;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::int32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gomoku.pb_pn_node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gomoku::pb_pn_node > children_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 proof_;
  ::PROTOBUF_NAMESPACE_ID::int32 disproof_;
  ::PROTOBUF_NAMESPACE_ID::int32 threat_;
  ::PROTOBUF_NAMESPACE_ID::int32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class board_root_FirstDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<board_root_FirstDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<board_root_FirstDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  board_root_FirstDataEntry_DoNotUse();
  explicit board_root_FirstDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const board_root_FirstDataEntry_DoNotUse& other);
  static const board_root_FirstDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const board_root_FirstDataEntry_DoNotUse*>(&_board_root_FirstDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class board_root PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gomoku.board_root) */ {
 public:
  inline board_root() : board_root(nullptr) {}
  virtual ~board_root();

  board_root(const board_root& from);
  board_root(board_root&& from) noexcept
    : board_root() {
    *this = ::std::move(from);
  }

  inline board_root& operator=(const board_root& from) {
    CopyFrom(from);
    return *this;
  }
  inline board_root& operator=(board_root&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const board_root& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const board_root* internal_default_instance() {
    return reinterpret_cast<const board_root*>(
               &_board_root_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(board_root& a, board_root& b) {
    a.Swap(&b);
  }
  inline void Swap(board_root* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(board_root* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline board_root* New() const final {
    return CreateMaybeMessage<board_root>(nullptr);
  }

  board_root* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<board_root>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const board_root& from);
  void MergeFrom(const board_root& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(board_root* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gomoku.board_root";
  }
  protected:
  explicit board_root(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFirstDataFieldNumber = 10,
  };
  // map<int32, .gomoku.board_node> first_data = 10;
  int first_data_size() const;
  private:
  int _internal_first_data_size() const;
  public:
  void clear_first_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
      _internal_first_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
      _internal_mutable_first_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
      first_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
      mutable_first_data();

  // @@protoc_insertion_point(class_scope:gomoku.board_root)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      board_root_FirstDataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > first_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// -------------------------------------------------------------------

class board_node_NextDataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<board_node_NextDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<board_node_NextDataEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  board_node_NextDataEntry_DoNotUse();
  explicit board_node_NextDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const board_node_NextDataEntry_DoNotUse& other);
  static const board_node_NextDataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const board_node_NextDataEntry_DoNotUse*>(&_board_node_NextDataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class board_node PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gomoku.board_node) */ {
 public:
  inline board_node() : board_node(nullptr) {}
  virtual ~board_node();

  board_node(const board_node& from);
  board_node(board_node&& from) noexcept
    : board_node() {
    *this = ::std::move(from);
  }

  inline board_node& operator=(const board_node& from) {
    CopyFrom(from);
    return *this;
  }
  inline board_node& operator=(board_node&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const board_node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const board_node* internal_default_instance() {
    return reinterpret_cast<const board_node*>(
               &_board_node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(board_node& a, board_node& b) {
    a.Swap(&b);
  }
  inline void Swap(board_node* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(board_node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline board_node* New() const final {
    return CreateMaybeMessage<board_node>(nullptr);
  }

  board_node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<board_node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const board_node& from);
  void MergeFrom(const board_node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(board_node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gomoku.board_node";
  }
  protected:
  explicit board_node(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_2eproto);
    return ::descriptor_table_node_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNextDataFieldNumber = 13,
    kActionColFieldNumber = 11,
    kActionRowFieldNumber = 12,
  };
  // map<int32, .gomoku.board_node> next_data = 13;
  int next_data_size() const;
  private:
  int _internal_next_data_size() const;
  public:
  void clear_next_data();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
      _internal_next_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
      _internal_mutable_next_data();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
      next_data() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
      mutable_next_data();

  // int32 action_col = 11;
  void clear_action_col();
  ::PROTOBUF_NAMESPACE_ID::int32 action_col() const;
  void set_action_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_col() const;
  void _internal_set_action_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 action_row = 12;
  void clear_action_row();
  ::PROTOBUF_NAMESPACE_ID::int32 action_row() const;
  void set_action_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_action_row() const;
  void _internal_set_action_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gomoku.board_node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      board_node_NextDataEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > next_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_col_;
  ::PROTOBUF_NAMESPACE_ID::int32 action_row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// pb_pn_node

// int32 col = 1;
inline void pb_pn_node::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::col() const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.col)
  return _internal_col();
}
inline void pb_pn_node::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void pb_pn_node::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:gomoku.pb_pn_node.col)
}

// int32 row = 2;
inline void pb_pn_node::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::row() const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.row)
  return _internal_row();
}
inline void pb_pn_node::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void pb_pn_node::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:gomoku.pb_pn_node.row)
}

// int32 proof = 5;
inline void pb_pn_node::clear_proof() {
  proof_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::_internal_proof() const {
  return proof_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::proof() const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.proof)
  return _internal_proof();
}
inline void pb_pn_node::_internal_set_proof(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proof_ = value;
}
inline void pb_pn_node::set_proof(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proof(value);
  // @@protoc_insertion_point(field_set:gomoku.pb_pn_node.proof)
}

// int32 disproof = 6;
inline void pb_pn_node::clear_disproof() {
  disproof_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::_internal_disproof() const {
  return disproof_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::disproof() const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.disproof)
  return _internal_disproof();
}
inline void pb_pn_node::_internal_set_disproof(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  disproof_ = value;
}
inline void pb_pn_node::set_disproof(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_disproof(value);
  // @@protoc_insertion_point(field_set:gomoku.pb_pn_node.disproof)
}

// int32 threat = 7;
inline void pb_pn_node::clear_threat() {
  threat_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::_internal_threat() const {
  return threat_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::threat() const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.threat)
  return _internal_threat();
}
inline void pb_pn_node::_internal_set_threat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  threat_ = value;
}
inline void pb_pn_node::set_threat(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_threat(value);
  // @@protoc_insertion_point(field_set:gomoku.pb_pn_node.threat)
}

// int32 size = 8;
inline void pb_pn_node::clear_size() {
  size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 pb_pn_node::size() const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.size)
  return _internal_size();
}
inline void pb_pn_node::_internal_set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  size_ = value;
}
inline void pb_pn_node::set_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:gomoku.pb_pn_node.size)
}

// repeated .gomoku.pb_pn_node children = 9;
inline int pb_pn_node::_internal_children_size() const {
  return children_.size();
}
inline int pb_pn_node::children_size() const {
  return _internal_children_size();
}
inline void pb_pn_node::clear_children() {
  children_.Clear();
}
inline ::gomoku::pb_pn_node* pb_pn_node::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:gomoku.pb_pn_node.children)
  return children_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gomoku::pb_pn_node >*
pb_pn_node::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:gomoku.pb_pn_node.children)
  return &children_;
}
inline const ::gomoku::pb_pn_node& pb_pn_node::_internal_children(int index) const {
  return children_.Get(index);
}
inline const ::gomoku::pb_pn_node& pb_pn_node::children(int index) const {
  // @@protoc_insertion_point(field_get:gomoku.pb_pn_node.children)
  return _internal_children(index);
}
inline ::gomoku::pb_pn_node* pb_pn_node::_internal_add_children() {
  return children_.Add();
}
inline ::gomoku::pb_pn_node* pb_pn_node::add_children() {
  // @@protoc_insertion_point(field_add:gomoku.pb_pn_node.children)
  return _internal_add_children();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gomoku::pb_pn_node >&
pb_pn_node::children() const {
  // @@protoc_insertion_point(field_list:gomoku.pb_pn_node.children)
  return children_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// board_root

// map<int32, .gomoku.board_node> first_data = 10;
inline int board_root::_internal_first_data_size() const {
  return first_data_.size();
}
inline int board_root::first_data_size() const {
  return _internal_first_data_size();
}
inline void board_root::clear_first_data() {
  first_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
board_root::_internal_first_data() const {
  return first_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
board_root::first_data() const {
  // @@protoc_insertion_point(field_map:gomoku.board_root.first_data)
  return _internal_first_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
board_root::_internal_mutable_first_data() {
  return first_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
board_root::mutable_first_data() {
  // @@protoc_insertion_point(field_mutable_map:gomoku.board_root.first_data)
  return _internal_mutable_first_data();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// board_node

// int32 action_col = 11;
inline void board_node::clear_action_col() {
  action_col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 board_node::_internal_action_col() const {
  return action_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 board_node::action_col() const {
  // @@protoc_insertion_point(field_get:gomoku.board_node.action_col)
  return _internal_action_col();
}
inline void board_node::_internal_set_action_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_col_ = value;
}
inline void board_node::set_action_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_col(value);
  // @@protoc_insertion_point(field_set:gomoku.board_node.action_col)
}

// int32 action_row = 12;
inline void board_node::clear_action_row() {
  action_row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 board_node::_internal_action_row() const {
  return action_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 board_node::action_row() const {
  // @@protoc_insertion_point(field_get:gomoku.board_node.action_row)
  return _internal_action_row();
}
inline void board_node::_internal_set_action_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  action_row_ = value;
}
inline void board_node::set_action_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_action_row(value);
  // @@protoc_insertion_point(field_set:gomoku.board_node.action_row)
}

// map<int32, .gomoku.board_node> next_data = 13;
inline int board_node::_internal_next_data_size() const {
  return next_data_.size();
}
inline int board_node::next_data_size() const {
  return _internal_next_data_size();
}
inline void board_node::clear_next_data() {
  next_data_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
board_node::_internal_next_data() const {
  return next_data_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >&
board_node::next_data() const {
  // @@protoc_insertion_point(field_map:gomoku.board_node.next_data)
  return _internal_next_data();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
board_node::_internal_mutable_next_data() {
  return next_data_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >*
board_node::mutable_next_data() {
  // @@protoc_insertion_point(field_mutable_map:gomoku.board_node.next_data)
  return _internal_mutable_next_data();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gomoku

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_2eproto
