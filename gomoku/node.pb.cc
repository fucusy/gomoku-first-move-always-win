// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#include "node.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_board_node_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_board_root_FirstDataEntry_DoNotUse_node_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_node_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_pn_node_node_2eproto;
namespace gomoku {
class pb_pn_nodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pb_pn_node> _instance;
} _pb_pn_node_default_instance_;
class board_root_FirstDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<board_root_FirstDataEntry_DoNotUse> _instance;
} _board_root_FirstDataEntry_DoNotUse_default_instance_;
class board_rootDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<board_root> _instance;
} _board_root_default_instance_;
class board_node_NextDataEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<board_node_NextDataEntry_DoNotUse> _instance;
} _board_node_NextDataEntry_DoNotUse_default_instance_;
class board_nodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<board_node> _instance;
} _board_node_default_instance_;
}  // namespace gomoku
static void InitDefaultsscc_info_board_node_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomoku::_board_node_NextDataEntry_DoNotUse_default_instance_;
    new (ptr) ::gomoku::board_node_NextDataEntry_DoNotUse();
  }
  {
    void* ptr = &::gomoku::_board_node_default_instance_;
    new (ptr) ::gomoku::board_node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomoku::board_node_NextDataEntry_DoNotUse::InitAsDefaultInstance();
  ::gomoku::board_node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_board_node_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_board_node_node_2eproto}, {}};

static void InitDefaultsscc_info_board_root_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomoku::_board_root_default_instance_;
    new (ptr) ::gomoku::board_root();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomoku::board_root::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_board_root_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_board_root_node_2eproto}, {
      &scc_info_board_root_FirstDataEntry_DoNotUse_node_2eproto.base,}};

static void InitDefaultsscc_info_board_root_FirstDataEntry_DoNotUse_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomoku::_board_root_FirstDataEntry_DoNotUse_default_instance_;
    new (ptr) ::gomoku::board_root_FirstDataEntry_DoNotUse();
  }
  ::gomoku::board_root_FirstDataEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_board_root_FirstDataEntry_DoNotUse_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_board_root_FirstDataEntry_DoNotUse_node_2eproto}, {
      &scc_info_board_node_node_2eproto.base,}};

static void InitDefaultsscc_info_pb_pn_node_node_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gomoku::_pb_pn_node_default_instance_;
    new (ptr) ::gomoku::pb_pn_node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gomoku::pb_pn_node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pb_pn_node_node_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pb_pn_node_node_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_node_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_node_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_node_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_node_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, col_),
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, row_),
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, proof_),
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, disproof_),
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, threat_),
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, size_),
  PROTOBUF_FIELD_OFFSET(::gomoku::pb_pn_node, children_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_root_FirstDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_root_FirstDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gomoku::board_root_FirstDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_root_FirstDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gomoku::board_root, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gomoku::board_root, first_data_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node_NextDataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node_NextDataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node_NextDataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node_NextDataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node, action_col_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node, action_row_),
  PROTOBUF_FIELD_OFFSET(::gomoku::board_node, next_data_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::gomoku::pb_pn_node)},
  { 12, 19, sizeof(::gomoku::board_root_FirstDataEntry_DoNotUse)},
  { 21, -1, sizeof(::gomoku::board_root)},
  { 27, 34, sizeof(::gomoku::board_node_NextDataEntry_DoNotUse)},
  { 36, -1, sizeof(::gomoku::board_node)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gomoku::_pb_pn_node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gomoku::_board_root_FirstDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gomoku::_board_root_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gomoku::_board_node_NextDataEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::gomoku::_board_node_default_instance_),
};

const char descriptor_table_protodef_node_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nnode.proto\022\006gomoku\"\213\001\n\npb_pn_node\022\013\n\003c"
  "ol\030\001 \001(\005\022\013\n\003row\030\002 \001(\005\022\r\n\005proof\030\005 \001(\005\022\020\n\010"
  "disproof\030\006 \001(\005\022\016\n\006threat\030\007 \001(\005\022\014\n\004size\030\010"
  " \001(\005\022$\n\010children\030\t \003(\0132\022.gomoku.pb_pn_no"
  "de\"\211\001\n\nboard_root\0225\n\nfirst_data\030\n \003(\0132!."
  "gomoku.board_root.FirstDataEntry\032D\n\016Firs"
  "tDataEntry\022\013\n\003key\030\001 \001(\005\022!\n\005value\030\002 \001(\0132\022"
  ".gomoku.board_node:\0028\001\"\256\001\n\nboard_node\022\022\n"
  "\naction_col\030\013 \001(\005\022\022\n\naction_row\030\014 \001(\005\0223\n"
  "\tnext_data\030\r \003(\0132 .gomoku.board_node.Nex"
  "tDataEntry\032C\n\rNextDataEntry\022\013\n\003key\030\001 \001(\005"
  "\022!\n\005value\030\002 \001(\0132\022.gomoku.board_node:\0028\001b"
  "\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_node_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_node_2eproto_sccs[4] = {
  &scc_info_board_node_node_2eproto.base,
  &scc_info_board_root_node_2eproto.base,
  &scc_info_board_root_FirstDataEntry_DoNotUse_node_2eproto.base,
  &scc_info_pb_pn_node_node_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_node_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_2eproto = {
  false, false, descriptor_table_protodef_node_2eproto, "node.proto", 487,
  &descriptor_table_node_2eproto_once, descriptor_table_node_2eproto_sccs, descriptor_table_node_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_node_2eproto::offsets,
  file_level_metadata_node_2eproto, 5, file_level_enum_descriptors_node_2eproto, file_level_service_descriptors_node_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_node_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_node_2eproto)), true);
namespace gomoku {

// ===================================================================

void pb_pn_node::InitAsDefaultInstance() {
}
class pb_pn_node::_Internal {
 public:
};

pb_pn_node::pb_pn_node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  children_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gomoku.pb_pn_node)
}
pb_pn_node::pb_pn_node(const pb_pn_node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      children_(from.children_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&col_, &from.col_,
    static_cast<size_t>(reinterpret_cast<char*>(&size_) -
    reinterpret_cast<char*>(&col_)) + sizeof(size_));
  // @@protoc_insertion_point(copy_constructor:gomoku.pb_pn_node)
}

void pb_pn_node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pb_pn_node_node_2eproto.base);
  ::memset(&col_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&col_)) + sizeof(size_));
}

pb_pn_node::~pb_pn_node() {
  // @@protoc_insertion_point(destructor:gomoku.pb_pn_node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pb_pn_node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pb_pn_node::ArenaDtor(void* object) {
  pb_pn_node* _this = reinterpret_cast< pb_pn_node* >(object);
  (void)_this;
}
void pb_pn_node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pb_pn_node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pb_pn_node& pb_pn_node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pb_pn_node_node_2eproto.base);
  return *internal_default_instance();
}


void pb_pn_node::Clear() {
// @@protoc_insertion_point(message_clear_start:gomoku.pb_pn_node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  ::memset(&col_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&col_)) + sizeof(size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pb_pn_node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 col = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 proof = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          proof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 disproof = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          disproof_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 threat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          threat_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .gomoku.pb_pn_node children = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pb_pn_node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gomoku.pb_pn_node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 col = 1;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_col(), target);
  }

  // int32 row = 2;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_row(), target);
  }

  // int32 proof = 5;
  if (this->proof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_proof(), target);
  }

  // int32 disproof = 6;
  if (this->disproof() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_disproof(), target);
  }

  // int32 threat = 7;
  if (this->threat() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_threat(), target);
  }

  // int32 size = 8;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_size(), target);
  }

  // repeated .gomoku.pb_pn_node children = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_children_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_children(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomoku.pb_pn_node)
  return target;
}

size_t pb_pn_node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomoku.pb_pn_node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .gomoku.pb_pn_node children = 9;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 col = 1;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  // int32 row = 2;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 proof = 5;
  if (this->proof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_proof());
  }

  // int32 disproof = 6;
  if (this->disproof() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_disproof());
  }

  // int32 threat = 7;
  if (this->threat() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_threat());
  }

  // int32 size = 8;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pb_pn_node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomoku.pb_pn_node)
  GOOGLE_DCHECK_NE(&from, this);
  const pb_pn_node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pb_pn_node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomoku.pb_pn_node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomoku.pb_pn_node)
    MergeFrom(*source);
  }
}

void pb_pn_node::MergeFrom(const pb_pn_node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomoku.pb_pn_node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.proof() != 0) {
    _internal_set_proof(from._internal_proof());
  }
  if (from.disproof() != 0) {
    _internal_set_disproof(from._internal_disproof());
  }
  if (from.threat() != 0) {
    _internal_set_threat(from._internal_threat());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void pb_pn_node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomoku.pb_pn_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pb_pn_node::CopyFrom(const pb_pn_node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomoku.pb_pn_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pb_pn_node::IsInitialized() const {
  return true;
}

void pb_pn_node::InternalSwap(pb_pn_node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  children_.InternalSwap(&other->children_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pb_pn_node, size_)
      + sizeof(pb_pn_node::size_)
      - PROTOBUF_FIELD_OFFSET(pb_pn_node, col_)>(
          reinterpret_cast<char*>(&col_),
          reinterpret_cast<char*>(&other->col_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pb_pn_node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

board_root_FirstDataEntry_DoNotUse::board_root_FirstDataEntry_DoNotUse() {}
board_root_FirstDataEntry_DoNotUse::board_root_FirstDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void board_root_FirstDataEntry_DoNotUse::MergeFrom(const board_root_FirstDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata board_root_FirstDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void board_root_FirstDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void board_root::InitAsDefaultInstance() {
}
class board_root::_Internal {
 public:
};

board_root::board_root(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  first_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gomoku.board_root)
}
board_root::board_root(const board_root& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  first_data_.MergeFrom(from.first_data_);
  // @@protoc_insertion_point(copy_constructor:gomoku.board_root)
}

void board_root::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_board_root_node_2eproto.base);
}

board_root::~board_root() {
  // @@protoc_insertion_point(destructor:gomoku.board_root)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void board_root::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void board_root::ArenaDtor(void* object) {
  board_root* _this = reinterpret_cast< board_root* >(object);
  (void)_this;
}
void board_root::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void board_root::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const board_root& board_root::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_board_root_node_2eproto.base);
  return *internal_default_instance();
}


void board_root::Clear() {
// @@protoc_insertion_point(message_clear_start:gomoku.board_root)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* board_root::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int32, .gomoku.board_node> first_data = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&first_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* board_root::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gomoku.board_root)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int32, .gomoku.board_node> first_data = 10;
  if (!this->_internal_first_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_first_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_first_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_iterator
          it = this->_internal_first_data().begin();
          it != this->_internal_first_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = board_root_FirstDataEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_iterator
          it = this->_internal_first_data().begin();
          it != this->_internal_first_data().end(); ++it) {
        target = board_root_FirstDataEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomoku.board_root)
  return target;
}

size_t board_root::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomoku.board_root)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .gomoku.board_node> first_data = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_first_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_iterator
      it = this->_internal_first_data().begin();
      it != this->_internal_first_data().end(); ++it) {
    total_size += board_root_FirstDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void board_root::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomoku.board_root)
  GOOGLE_DCHECK_NE(&from, this);
  const board_root* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<board_root>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomoku.board_root)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomoku.board_root)
    MergeFrom(*source);
  }
}

void board_root::MergeFrom(const board_root& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomoku.board_root)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_data_.MergeFrom(from.first_data_);
}

void board_root::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomoku.board_root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void board_root::CopyFrom(const board_root& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomoku.board_root)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool board_root::IsInitialized() const {
  return true;
}

void board_root::InternalSwap(board_root* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  first_data_.Swap(&other->first_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata board_root::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

board_node_NextDataEntry_DoNotUse::board_node_NextDataEntry_DoNotUse() {}
board_node_NextDataEntry_DoNotUse::board_node_NextDataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void board_node_NextDataEntry_DoNotUse::MergeFrom(const board_node_NextDataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata board_node_NextDataEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void board_node_NextDataEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void board_node::InitAsDefaultInstance() {
}
class board_node::_Internal {
 public:
};

board_node::board_node(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  next_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:gomoku.board_node)
}
board_node::board_node(const board_node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  next_data_.MergeFrom(from.next_data_);
  ::memcpy(&action_col_, &from.action_col_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_row_) -
    reinterpret_cast<char*>(&action_col_)) + sizeof(action_row_));
  // @@protoc_insertion_point(copy_constructor:gomoku.board_node)
}

void board_node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_board_node_node_2eproto.base);
  ::memset(&action_col_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_row_) -
      reinterpret_cast<char*>(&action_col_)) + sizeof(action_row_));
}

board_node::~board_node() {
  // @@protoc_insertion_point(destructor:gomoku.board_node)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void board_node::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void board_node::ArenaDtor(void* object) {
  board_node* _this = reinterpret_cast< board_node* >(object);
  (void)_this;
}
void board_node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void board_node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const board_node& board_node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_board_node_node_2eproto.base);
  return *internal_default_instance();
}


void board_node::Clear() {
// @@protoc_insertion_point(message_clear_start:gomoku.board_node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  next_data_.Clear();
  ::memset(&action_col_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&action_row_) -
      reinterpret_cast<char*>(&action_col_)) + sizeof(action_row_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* board_node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 action_col = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          action_col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 action_row = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          action_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<int32, .gomoku.board_node> next_data = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&next_data_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* board_node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:gomoku.board_node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 action_col = 11;
  if (this->action_col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_action_col(), target);
  }

  // int32 action_row = 12;
  if (this->action_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_action_row(), target);
  }

  // map<int32, .gomoku.board_node> next_data = 13;
  if (!this->_internal_next_data().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int32, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_next_data().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_next_data().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_iterator
          it = this->_internal_next_data().begin();
          it != this->_internal_next_data().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = board_node_NextDataEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_iterator
          it = this->_internal_next_data().begin();
          it != this->_internal_next_data().end(); ++it) {
        target = board_node_NextDataEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gomoku.board_node)
  return target;
}

size_t board_node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gomoku.board_node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .gomoku.board_node> next_data = 13;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_next_data_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::gomoku::board_node >::const_iterator
      it = this->_internal_next_data().begin();
      it != this->_internal_next_data().end(); ++it) {
    total_size += board_node_NextDataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // int32 action_col = 11;
  if (this->action_col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_col());
  }

  // int32 action_row = 12;
  if (this->action_row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_action_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void board_node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gomoku.board_node)
  GOOGLE_DCHECK_NE(&from, this);
  const board_node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<board_node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gomoku.board_node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gomoku.board_node)
    MergeFrom(*source);
  }
}

void board_node::MergeFrom(const board_node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gomoku.board_node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  next_data_.MergeFrom(from.next_data_);
  if (from.action_col() != 0) {
    _internal_set_action_col(from._internal_action_col());
  }
  if (from.action_row() != 0) {
    _internal_set_action_row(from._internal_action_row());
  }
}

void board_node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gomoku.board_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void board_node::CopyFrom(const board_node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gomoku.board_node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool board_node::IsInitialized() const {
  return true;
}

void board_node::InternalSwap(board_node* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  next_data_.Swap(&other->next_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(board_node, action_row_)
      + sizeof(board_node::action_row_)
      - PROTOBUF_FIELD_OFFSET(board_node, action_col_)>(
          reinterpret_cast<char*>(&action_col_),
          reinterpret_cast<char*>(&other->action_col_));
}

::PROTOBUF_NAMESPACE_ID::Metadata board_node::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gomoku
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::gomoku::pb_pn_node* Arena::CreateMaybeMessage< ::gomoku::pb_pn_node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gomoku::pb_pn_node >(arena);
}
template<> PROTOBUF_NOINLINE ::gomoku::board_root_FirstDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::gomoku::board_root_FirstDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gomoku::board_root_FirstDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gomoku::board_root* Arena::CreateMaybeMessage< ::gomoku::board_root >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gomoku::board_root >(arena);
}
template<> PROTOBUF_NOINLINE ::gomoku::board_node_NextDataEntry_DoNotUse* Arena::CreateMaybeMessage< ::gomoku::board_node_NextDataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gomoku::board_node_NextDataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::gomoku::board_node* Arena::CreateMaybeMessage< ::gomoku::board_node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::gomoku::board_node >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
